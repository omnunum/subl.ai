{
  "version": 3,
  "sources": ["../../wundergraph.config.ts", "../../wundergraph.server.ts", "../../wundergraph.operations.ts"],
  "sourcesContent": ["import { configureWunderGraphApplication, cors, EnvironmentVariable, introspect, templates } from '@wundergraph/sdk';\nimport server from './wundergraph.server';\nimport operations from './wundergraph.operations';\n\nconst db = introspect.postgresql({\n\tapiNamespace: 'db',\n\tdatabaseURL: new EnvironmentVariable('DATABASE_URL'),\n});\n\n// configureWunderGraph emits the configuration\nconfigureWunderGraphApplication({\n\tapis: [db],\n\tserver,\n\toperations,\n\tgenerate: {\n\t\tcodeGenerators: [],\n\t},\n\tcors: {\n\t\t...cors.allowAll,\n\t\tallowedOrigins: ['http://localhost:3000'],\n\t},\n\tsecurity: {\n\t\tenableGraphQLEndpoint: true,\n\t},\n});\n", "import { GraphQLObjectType, GraphQLSchema, GraphQLString } from 'graphql';\nimport { configureWunderGraphServer } from '@wundergraph/sdk/server';\n\nexport default configureWunderGraphServer(() => ({\n\thooks: {\n\t\tqueries: {},\n\t\tmutations: {},\n\t},\n\tgraphqlServers: [\n\t\t{\n\t\t\tserverName: 'gql',\n\t\t\tapiNamespace: 'gql',\n\t\t\tschema: new GraphQLSchema({\n\t\t\t\tquery: new GraphQLObjectType({\n\t\t\t\t\tname: 'RootQueryType',\n\t\t\t\t\tfields: {\n\t\t\t\t\t\thello: {\n\t\t\t\t\t\t\ttype: GraphQLString,\n\t\t\t\t\t\t\tresolve() {\n\t\t\t\t\t\t\t\treturn 'world';\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t}),\n\t\t},\n\t],\n}));\n", "import { configureWunderGraphOperations } from '@wundergraph/sdk';\nimport type { OperationsConfiguration } from './generated/wundergraph.operations';\n\nexport default configureWunderGraphOperations<OperationsConfiguration>({\n\toperations: {\n\t\tdefaultConfig: {\n\t\t\tauthentication: {\n\t\t\t\trequired: false,\n\t\t\t},\n\t\t},\n\t\tqueries: (config) => ({\n\t\t\t...config,\n\t\t\tcaching: {\n\t\t\t\tenable: false,\n\t\t\t\tstaleWhileRevalidate: 60,\n\t\t\t\tmaxAge: 60,\n\t\t\t\tpublic: true,\n\t\t\t},\n\t\t\tliveQuery: {\n\t\t\t\tenable: true,\n\t\t\t\tpollingIntervalSeconds: 1,\n\t\t\t},\n\t\t}),\n\t\tmutations: (config) => ({\n\t\t\t...config,\n\t\t}),\n\t\tsubscriptions: (config) => ({\n\t\t\t...config,\n\t\t}),\n\t\tcustom: {},\n\t},\n});\n"],
  "mappings": ";AAAA,IAAAA,cAAkG;;;ACAlG,qBAAgE;AAChE,oBAA2C;AAE3C,IAAO,iCAAQ,0CAA2B,OAAO;AAAA,EAChD,OAAO;AAAA,IACN,SAAS,CAAC;AAAA,IACV,WAAW,CAAC;AAAA,EACb;AAAA,EACA,gBAAgB;AAAA,IACf;AAAA,MACC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,QAAQ,IAAI,6BAAc;AAAA,QACzB,OAAO,IAAI,iCAAkB;AAAA,UAC5B,MAAM;AAAA,UACN,QAAQ;AAAA,YACP,OAAO;AAAA,cACN,MAAM;AAAA,cACN,UAAU;AACT,uBAAO;AAAA,cACR;AAAA,YACD;AAAA,UACD;AAAA,QACD,CAAC;AAAA,MACF,CAAC;AAAA,IACF;AAAA,EACD;AACD,EAAE;;;AC3BF,iBAA+C;AAG/C,IAAO,qCAAQ,2CAAwD;AAAA,EACtE,YAAY;AAAA,IACX,eAAe;AAAA,MACd,gBAAgB;AAAA,QACf,UAAU;AAAA,MACX;AAAA,IACD;AAAA,IACA,SAAS,CAAC,YAAY;AAAA,MACrB,GAAG;AAAA,MACH,SAAS;AAAA,QACR,QAAQ;AAAA,QACR,sBAAsB;AAAA,QACtB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACT;AAAA,MACA,WAAW;AAAA,QACV,QAAQ;AAAA,QACR,wBAAwB;AAAA,MACzB;AAAA,IACD;AAAA,IACA,WAAW,CAAC,YAAY;AAAA,MACvB,GAAG;AAAA,IACJ;AAAA,IACA,eAAe,CAAC,YAAY;AAAA,MAC3B,GAAG;AAAA,IACJ;AAAA,IACA,QAAQ,CAAC;AAAA,EACV;AACD,CAAC;;;AF3BD,IAAM,KAAK,uBAAW,WAAW;AAAA,EAChC,cAAc;AAAA,EACd,aAAa,IAAI,gCAAoB,cAAc;AACpD,CAAC;AAAA,IAGD,6CAAgC;AAAA,EAC/B,MAAM,CAAC,EAAE;AAAA,EACT;AAAA,EACA;AAAA,EACA,UAAU;AAAA,IACT,gBAAgB,CAAC;AAAA,EAClB;AAAA,EACA,MAAM;AAAA,IACL,GAAG,iBAAK;AAAA,IACR,gBAAgB,CAAC,uBAAuB;AAAA,EACzC;AAAA,EACA,UAAU;AAAA,IACT,uBAAuB;AAAA,EACxB;AACD,CAAC;",
  "names": ["import_sdk"]
}
