{
  "version": 3,
  "sources": ["../../wundergraph.config.ts", "../../wundergraph.server.ts", "../../wundergraph.operations.ts"],
  "sourcesContent": ["import { configureWunderGraphApplication, cors, EnvironmentVariable, introspect, templates } from '@wundergraph/sdk';\nimport server from './wundergraph.server';\nimport operations from './wundergraph.operations';\n\nconst db = introspect.postgresql({\n\tapiNamespace: 'db',\n\tdatabaseURL: new EnvironmentVariable('DATABASE_URL'),\n});\n\n// configureWunderGraph emits the configuration\nconfigureWunderGraphApplication({\n\tapis: [db],\n\tserver,\n\toperations,\n\tgenerate: {\n\t\tcodeGenerators: [],\n\t},\n\tcors: {\n\t\t...cors.allowAll,\n\t\tallowedOrigins: ['http://localhost:3000'],\n\t},\n\tsecurity: {\n\t\tenableGraphQLEndpoint: true,\n\t},\n});\n", "import { GraphQLObjectType, GraphQLSchema, GraphQLString } from 'graphql';\nimport { configureWunderGraphServer } from '@wundergraph/sdk/server';\n\nexport default configureWunderGraphServer(() => ({\n\thooks: {\n\t\tqueries: {},\n\t\tmutations: {},\n\t},\n\tgraphqlServers: [\n\t\t{\n\t\t\tserverName: 'gql',\n\t\t\tapiNamespace: 'gql',\n\t\t\tschema: new GraphQLSchema({\n\t\t\t\tquery: new GraphQLObjectType({\n\t\t\t\t\tname: 'RootQueryType',\n\t\t\t\t\tfields: {\n\t\t\t\t\t\thello: {\n\t\t\t\t\t\t\ttype: GraphQLString,\n\t\t\t\t\t\t\tresolve() {\n\t\t\t\t\t\t\t\treturn 'world';\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t}),\n\t\t},\n\t],\n}));\n", "import { configureWunderGraphOperations } from '@wundergraph/sdk';\nimport type { OperationsConfiguration } from './generated/wundergraph.operations';\n\nexport default configureWunderGraphOperations<OperationsConfiguration>({\n\toperations: {\n\t\tdefaultConfig: {\n\t\t\tauthentication: {\n\t\t\t\trequired: false,\n\t\t\t},\n\t\t},\n\t\tqueries: (config) => ({\n\t\t\t...config,\n\t\t\tcaching: {\n\t\t\t\tenable: false,\n\t\t\t\tstaleWhileRevalidate: 60,\n\t\t\t\tmaxAge: 60,\n\t\t\t\tpublic: true,\n\t\t\t},\n\t\t\tliveQuery: {\n\t\t\t\tenable: true,\n\t\t\t\tpollingIntervalSeconds: 1,\n\t\t\t},\n\t\t}),\n\t\tmutations: (config) => ({\n\t\t\t...config,\n\t\t}),\n\t\tsubscriptions: (config) => ({\n\t\t\t...config,\n\t\t}),\n\t\tcustom: {},\n\t},\n});\n"],
  "mappings": "AAAA,IAAAA,EAAkG,4BCAlG,IAAAC,EAAgE,mBAChEC,EAA2C,mCAEpCC,KAAQ,8BAA2B,KAAO,CAChD,MAAO,CACN,QAAS,CAAC,EACV,UAAW,CAAC,CACb,EACA,eAAgB,CACf,CACC,WAAY,MACZ,aAAc,MACd,OAAQ,IAAI,gBAAc,CACzB,MAAO,IAAI,oBAAkB,CAC5B,KAAM,gBACN,OAAQ,CACP,MAAO,CACN,KAAM,gBACN,SAAU,CACT,MAAO,OACR,CACD,CACD,CACD,CAAC,CACF,CAAC,CACF,CACD,CACD,EAAE,EC3BF,IAAAC,EAA+C,4BAGxCC,KAAQ,kCAAwD,CACtE,WAAY,CACX,cAAe,CACd,eAAgB,CACf,SAAU,EACX,CACD,EACA,QAAUC,IAAY,CACrB,GAAGA,EACH,QAAS,CACR,OAAQ,GACR,qBAAsB,GACtB,OAAQ,GACR,OAAQ,EACT,EACA,UAAW,CACV,OAAQ,GACR,uBAAwB,CACzB,CACD,GACA,UAAYA,IAAY,CACvB,GAAGA,CACJ,GACA,cAAgBA,IAAY,CAC3B,GAAGA,CACJ,GACA,OAAQ,CAAC,CACV,CACD,CAAC,EF3BD,IAAMC,EAAK,aAAW,WAAW,CAChC,aAAc,KACd,YAAa,IAAI,sBAAoB,cAAc,CACpD,CAAC,KAGD,mCAAgC,CAC/B,KAAM,CAACA,CAAE,EACT,OAAAC,EACA,WAAAC,EACA,SAAU,CACT,eAAgB,CAAC,CAClB,EACA,KAAM,CACL,GAAG,OAAK,SACR,eAAgB,CAAC,uBAAuB,CACzC,EACA,SAAU,CACT,sBAAuB,EACxB,CACD,CAAC",
  "names": ["import_sdk", "import_graphql", "import_server", "wundergraph_server_default", "import_sdk", "wundergraph_operations_default", "config", "db", "wundergraph_server_default", "wundergraph_operations_default"]
}
