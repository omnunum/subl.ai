// Code generated by wunderctl. DO NOT EDIT.

// @ts-ignore: no-types available
import { JSONSchema7 } from "json-schema";

interface Schema {
	Scripts: {
		input: JSONSchema7;
		response: JSONSchema7;
	};
	UsersGet: {
		input: JSONSchema7;
		response: JSONSchema7;
	};
	UsersSubscribe: {
		input: JSONSchema7;
		response: JSONSchema7;
	};
	UsersUpdate: {
		input: JSONSchema7;
		response: JSONSchema7;
	};
}

const jsonSchema: Schema = {
	Scripts: {
		input: { type: "object", properties: {}, additionalProperties: false },
		response: {
			type: "object",
			properties: {
				data: {
					type: "object",
					properties: {
						db_findManyscripts: {
							type: "array",
							items: {
								type: "object",
								properties: {
									id: { type: "string" },
									name: { type: "string" },
									summary: { type: "string" },
									sections: {
										type: "array",
										items: {
											type: "object",
											properties: {
												id: { type: "string" },
												name: { type: "string" },
												sort_order: { type: "integer" },
												fragments: {
													type: "array",
													items: {
														type: "object",
														properties: { sort_order: { type: "integer" }, content: { type: "string" } },
														additionalProperties: false,
														required: ["sort_order", "content"],
													},
												},
											},
											additionalProperties: false,
											required: ["id", "name", "sort_order"],
										},
									},
								},
								additionalProperties: false,
								required: ["id", "name", "summary"],
							},
						},
					},
					additionalProperties: false,
					required: ["db_findManyscripts"],
				},
			},
			additionalProperties: false,
		},
	},
	UsersGet: {
		input: { type: "object", properties: {} },
		response: { type: "object", properties: { data: {} } },
	},
	UsersSubscribe: {
		input: { type: "object", properties: {} },
		response: { type: "object", properties: { data: {} } },
	},
	UsersUpdate: {
		input: {
			type: "object",
			properties: { id: { type: "string" }, name: { type: "string" }, bio: { type: "string" } },
			required: ["id", "name", "bio"],
			additionalProperties: false,
			$schema: "http://json-schema.org/draft-07/schema#",
		},
		response: { type: "object", properties: { data: {} } },
	},
};
export default jsonSchema;
